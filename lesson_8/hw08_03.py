# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список
# только числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не
# фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например,
# команду “stop”. При этом скрипт завершается, сформированный список с числами выводится на экран. Подсказка: для
# данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного
# элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
class ListError(Exception):
    def __init__(self):
        pass


class CheckList:
    def __init__(self):
        self.my_list = []

    def check_input(self):
        while True:
            try:
                user_input = input(f"Введите целое число. Для окончания ввода введите  - 'stop' >>>").lower()
                if user_input == 'stop':
                    print(f'Вы ввели числа {self.my_list}')
                    break
                else:
                    try:
                        user_input = int(user_input)
                        self.my_list.append(user_input)
                    except ValueError:
                        raise ListError
            except ListError:
                pass


a = CheckList()
a.check_input()
